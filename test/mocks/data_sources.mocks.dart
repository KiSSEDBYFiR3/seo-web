// Mocks generated by Mockito 5.4.4 from annotations
// in seo_web/test/mocks/data_sources.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:seo_web/feature/data/data_source/local_data_source/local_data_source.dart'
    as _i8;
import 'package:seo_web/feature/data/data_source/remote_data_source/auth/auth_data_source.dart'
    as _i5;
import 'package:seo_web/feature/data/data_source/remote_data_source/cart/cart_data_source.dart'
    as _i9;
import 'package:seo_web/feature/data/data_source/remote_data_source/favorites/favorites_data_source.dart'
    as _i10;
import 'package:seo_web/feature/data/data_source/remote_data_source/order/order_data_source.dart'
    as _i13;
import 'package:seo_web/feature/data/data_source/remote_data_source/products/products_data_source.dart'
    as _i12;
import 'package:seo_web/feature/data/model/cart/cart_dto.dart' as _i4;
import 'package:seo_web/feature/data/model/product/product_dto.dart' as _i11;
import 'package:seo_web/feature/data/services/auth/auth_service.dart' as _i2;
import 'package:seo_web/feature/domain/repository/i_local_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthService_0 extends _i1.SmartFake implements _i2.AuthService {
  _FakeAuthService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeILocalAuthRepository_1 extends _i1.SmartFake
    implements _i3.ILocalAuthRepository {
  _FakeILocalAuthRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCartDto_2 extends _i1.SmartFake implements _i4.CartDto {
  _FakeCartDto_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthDataSource extends _i1.Mock implements _i5.AuthDataSource {
  MockAuthDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthService get authService => (super.noSuchMethod(
        Invocation.getter(#authService),
        returnValue: _FakeAuthService_0(
          this,
          Invocation.getter(#authService),
        ),
      ) as _i2.AuthService);

  @override
  _i3.ILocalAuthRepository get localRepository => (super.noSuchMethod(
        Invocation.getter(#localRepository),
        returnValue: _FakeILocalAuthRepository_1(
          this,
          Invocation.getter(#localRepository),
        ),
      ) as _i3.ILocalAuthRepository);

  @override
  _i6.Future<(String, String)> authorize() => (super.noSuchMethod(
        Invocation.method(
          #authorize,
          [],
        ),
        returnValue: _i6.Future<(String, String)>.value((
          _i7.dummyValue<String>(
            this,
            Invocation.method(
              #authorize,
              [],
            ),
          ),
          _i7.dummyValue<String>(
            this,
            Invocation.method(
              #authorize,
              [],
            ),
          )
        )),
      ) as _i6.Future<(String, String)>);

  @override
  _i6.Future<(String, String)> updateToken() => (super.noSuchMethod(
        Invocation.method(
          #updateToken,
          [],
        ),
        returnValue: _i6.Future<(String, String)>.value((
          _i7.dummyValue<String>(
            this,
            Invocation.method(
              #updateToken,
              [],
            ),
          ),
          _i7.dummyValue<String>(
            this,
            Invocation.method(
              #updateToken,
              [],
            ),
          )
        )),
      ) as _i6.Future<(String, String)>);
}

/// A class which mocks [LocalAuthDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalAuthDataSource extends _i1.Mock
    implements _i8.LocalAuthDataSource {
  MockLocalAuthDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<String> getAccessToken() => (super.noSuchMethod(
        Invocation.method(
          #getAccessToken,
          [],
        ),
        returnValue: _i6.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #getAccessToken,
            [],
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<String> getRefreshToken() => (super.noSuchMethod(
        Invocation.method(
          #getRefreshToken,
          [],
        ),
        returnValue: _i6.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #getRefreshToken,
            [],
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<void> setAccessToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #setAccessToken,
          [token],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> setRefreshToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #setRefreshToken,
          [token],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> setUuid(String? uuid) => (super.noSuchMethod(
        Invocation.method(
          #setUuid,
          [uuid],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<String> getUuid() => (super.noSuchMethod(
        Invocation.method(
          #getUuid,
          [],
        ),
        returnValue: _i6.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #getUuid,
            [],
          ),
        )),
      ) as _i6.Future<String>);
}

/// A class which mocks [CartDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartDataSource extends _i1.Mock implements _i9.CartDataSource {
  MockCartDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.CartDto> addToCart({required int? id}) => (super.noSuchMethod(
        Invocation.method(
          #addToCart,
          [],
          {#id: id},
        ),
        returnValue: _i6.Future<_i4.CartDto>.value(_FakeCartDto_2(
          this,
          Invocation.method(
            #addToCart,
            [],
            {#id: id},
          ),
        )),
      ) as _i6.Future<_i4.CartDto>);

  @override
  _i6.Future<_i4.CartDto> deleteFromCart({required int? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteFromCart,
          [],
          {#id: id},
        ),
        returnValue: _i6.Future<_i4.CartDto>.value(_FakeCartDto_2(
          this,
          Invocation.method(
            #deleteFromCart,
            [],
            {#id: id},
          ),
        )),
      ) as _i6.Future<_i4.CartDto>);

  @override
  _i6.Future<_i4.CartDto> getCart() => (super.noSuchMethod(
        Invocation.method(
          #getCart,
          [],
        ),
        returnValue: _i6.Future<_i4.CartDto>.value(_FakeCartDto_2(
          this,
          Invocation.method(
            #getCart,
            [],
          ),
        )),
      ) as _i6.Future<_i4.CartDto>);
}

/// A class which mocks [FavoritesDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoritesDataSource extends _i1.Mock
    implements _i10.FavoritesDataSource {
  MockFavoritesDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i11.ProductDto>> addToFavorites({required int? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToFavorites,
          [],
          {#id: id},
        ),
        returnValue:
            _i6.Future<List<_i11.ProductDto>>.value(<_i11.ProductDto>[]),
      ) as _i6.Future<List<_i11.ProductDto>>);

  @override
  _i6.Future<List<_i11.ProductDto>> deleteFromFavorites({required int? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteFromFavorites,
          [],
          {#id: id},
        ),
        returnValue:
            _i6.Future<List<_i11.ProductDto>>.value(<_i11.ProductDto>[]),
      ) as _i6.Future<List<_i11.ProductDto>>);

  @override
  _i6.Future<List<_i11.ProductDto>> getFavorites() => (super.noSuchMethod(
        Invocation.method(
          #getFavorites,
          [],
        ),
        returnValue:
            _i6.Future<List<_i11.ProductDto>>.value(<_i11.ProductDto>[]),
      ) as _i6.Future<List<_i11.ProductDto>>);
}

/// A class which mocks [ProductsDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductsDataSource extends _i1.Mock
    implements _i12.ProductsDataSource {
  MockProductsDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i11.ProductDto>> getAllProducts() => (super.noSuchMethod(
        Invocation.method(
          #getAllProducts,
          [],
        ),
        returnValue:
            _i6.Future<List<_i11.ProductDto>>.value(<_i11.ProductDto>[]),
      ) as _i6.Future<List<_i11.ProductDto>>);
}

/// A class which mocks [OrderDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrderDataSource extends _i1.Mock implements _i13.OrderDataSource {
  MockOrderDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<String> createOrder() => (super.noSuchMethod(
        Invocation.method(
          #createOrder,
          [],
        ),
        returnValue: _i6.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #createOrder,
            [],
          ),
        )),
      ) as _i6.Future<String>);
}
